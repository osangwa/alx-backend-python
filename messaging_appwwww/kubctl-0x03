#!/bin/bash

# kubctl-0x03 - Rolling update script

echo "Starting rolling update to version 2.0..."

# Apply the updated deployment
echo "Applying updated deployment..."
kubectl apply -f blue_deployment.yaml

# Monitor rollout status in background
echo "Monitoring rollout status..."
kubectl rollout status deployment/django-messaging-app --timeout=300s &
ROLLOUT_PID=$!

# Set up port forwarding for continuous testing
echo "Setting up port forwarding for testing..."
kubectl port-forward service/django-messaging-service 8001:8000 &
PORT_FORWARD_PID=$!

# Wait for port forwarding to establish
sleep 5

# Continuous testing during rollout
echo "Starting continuous testing during rollout..."
TEST_COUNT=0
TEST_SUCCESS=0
TEST_FAIL=0

while kill -0 $ROLLOUT_PID 2>/dev/null; do
    RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8001/health/ || echo "000")
    
    if [ "$RESPONSE" = "200" ]; then
        echo "‚úÖ Request successful (HTTP $RESPONSE)"
        ((TEST_SUCCESS++))
    else
        echo "‚ùå Request failed (HTTP $RESPONSE)"
        ((TEST_FAIL++))
    fi
    
    ((TEST_COUNT++))
    sleep 2
done

# Clean up background processes
kill $PORT_FORWARD_PID 2>/dev/null
wait $ROLLOUT_PID

# Final verification
echo "Rollout completed. Final status:"
kubectl get pods -l app=django-messaging

echo "Testing summary:"
echo "Total requests: $TEST_COUNT"
echo "Successful: $TEST_SUCCESS"
echo "Failed: $TEST_FAIL"

if [ $TEST_FAIL -eq 0 ]; then
    echo "üéâ Rolling update completed with zero downtime!"
else
    echo "‚ö†Ô∏è  Rolling update completed with some failures"
    echo "Failure rate: $((TEST_FAIL * 100 / TEST_COUNT))%"
fi

# Verify rolling update is complete
echo "Verifying rollout history:"
kubectl rollout history deployment/django-messaging-app

echo "Rolling update script completed!"